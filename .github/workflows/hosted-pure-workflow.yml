# Copyright (c) 2021 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT

# A "pure" GitHub workflow using CMake, Ninja and vcpkg.
# It leverages both CMakePresets.json and vcpkg.json to have consistent build locallly and on continuous integration servers.
# It is called "pure workflow" because it is an example which minimizes the usage of custom GitHub actions, 
# but leverages directly the tools that could be easily run on your development machines (i.e. CMake, vcpkg, Ninja)
# to ensure a perfectly identical build locally and on the remote build servers..
name: hosted-pure-workflow
on: [push]

jobs:
  job:
    name: ${{ matrix.os }}-hosted-pure
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
          - os: macos-latest
            triplet: x64-osx
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      # Indicates the location where vpkg is going to put built packages (and it needs to be cached).
      VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg/vcpkg_installed/

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest
      # Restore both vcpkg and its artifacts from the GitHub cache service.
      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v2
        with:
          # The first path is where vcpkg generates artifacts when CMake is used with the vcpkg's toolchain
          # and there is a `vcpkg.json` manifest along with the CMakeLists.txt. In this case vcpkg is indirectly being 
          # bootstrapped and used by CMake to install the requested packages into `<cmake-build-dir>/vcpkg_installed`. 
          # Note when vcpkg is directly run the path would be instead `<root-repository>/vcpkg_installed/`.
          #
          # The first path is the location of vcpkg: it contains the vcpkg executable and data files. 
          # Note: the specified path contains the `vcpkg`'s `installed` directory as well that must be cached..
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
          key: |
            ${{ hashFiles( 'vcpkg_manifest/vcpkg.json' ) }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ matrix.triplet }}-invalidate
      - name: Show content of workspace after cache has been restored
        run: find $RUNNER_WORKSPACE
        shell: bash
      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1
      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install the dependencies as specified in vcpkg.json.
      - name: Install dependencies and generate project files
        run: |
          cmake --preset default-multi
        # The working directory is needed since the CMakePresets.json is searched in the current working directory only.
        working-directory: "${{ github.workspace }}/cmakepresets"
      # Build the whole project with Ninja (which is spawn by CMake).
      - name: Build
        run: |
          cmake --build --preset default-multi
        # The working directory is needed since the CMakePresets.json is searched in the current working directory only.
        working-directory: "${{ github.workspace }}/cmakepresets"
      - name: Show content of workspace at its completion
        run: find $RUNNER_WORKSPACE
        shell: bash
